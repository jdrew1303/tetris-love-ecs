local Concord = require("modules.Concord")
local Entity    = Concord.entity
local Component = Concord.component
local gd = require("gamedata")
local hf = require("helperfunctions")
local cmp = require("components")
local entities = {}

--### ENTITIES START
entities.brd = Entity()
entities.brd:give(cmp.Position,250,0)
    :give(cmp.GameOver)
    :give(cmp.Grid,gd.board)
    :give(cmp.LinesCleared)
    :give(cmp.CellSize,20)
    :give(cmp.Turns)
    :give(cmp.Color,1)
    :give(cmp.HeldPiece)
    :give(cmp.ColorValues,gd.colorPatterns)
    :give(cmp.IsBoard)
    :give(cmp.LastInput,{"left","right","up","down","space","c","z","p","r"})
    :give(cmp.PieceBucket)
    :give(cmp.Input,{"left","right","up","down","space","c","z","p","r"})
    :give(cmp.VisiblePieces)
    :give(cmp.LastAction)
    :give(cmp.DAS,0.132)
    :give(cmp.TimeCounter)
    :give(cmp.ARR,30)
    :give(cmp.DownSpeed,70)

entities.piece_J = Entity()
entities.piece_J:give(cmp.Grid,gd.J_matrix)
        :give(cmp.Rotations,gd.J_rotations)
        :give(cmp.Color,2)
        :give(cmp.IsPiece)
        :give(cmp.Name,"J")
        :give(cmp.CanGoDown)
        :give(cmp.IsActive,false)
        :give(cmp.Position,3,3)
        :give(cmp.MutablePosition,3,3)

entities.piece_L = Entity()
entities.piece_L:give(cmp.Grid,gd.L_matrix)
        :give(cmp.Rotations,gd.L_rotations)
        :give(cmp.Color,3)
        :give(cmp.IsPiece)
        :give(cmp.Name,"L")
        :give(cmp.CanGoDown)
        :give(cmp.IsActive,false)
        :give(cmp.Position,3,3)
        :give(cmp.MutablePosition,3,3)

entities.piece_T = Entity()
entities.piece_T:give(cmp.Grid,gd.T_matrix)
        :give(cmp.Rotations,gd.T_rotations)
        :give(cmp.Color,4)
        :give(cmp.IsPiece)
        :give(cmp.Name,"T")
        :give(cmp.CanGoDown)
        :give(cmp.IsActive,false)
        :give(cmp.Position,3,3)
        :give(cmp.MutablePosition,3,3)

entities.piece_S = Entity()
entities.piece_S:give(cmp.Grid,gd.S_matrix)
        :give(cmp.Rotations,gd.S_rotations)
        :give(cmp.Color,5)
        :give(cmp.IsPiece)
        :give(cmp.Name,"S")
        :give(cmp.CanGoDown)
        :give(cmp.IsActive,false)
        :give(cmp.Position,3,3)
        :give(cmp.MutablePosition,3,3)

entities.piece_Z = Entity()
entities.piece_Z:give(cmp.Grid,gd.Z_matrix)
        :give(cmp.Rotations,gd.Z_rotations)
        :give(cmp.Color,6)
        :give(cmp.IsPiece)
        :give(cmp.Name,"Z")
        :give(cmp.CanGoDown)
        :give(cmp.IsActive,false)
        :give(cmp.Position,3,3)
        :give(cmp.MutablePosition,3,3)

entities.piece_I = Entity()
entities.piece_I:give(cmp.Grid,gd.I_matrix)
                :give(cmp.Rotations,gd.I_rotations)
                :give(cmp.Color,7)
                :give(cmp.IsPiece)
                :give(cmp.Name,"I")
                :give(cmp.CanGoDown)
                :give(cmp.IsActive,false)
                :give(cmp.Position,3,3)
                :give(cmp.MutablePosition,3,3)

entities.piece_O = Entity()
entities.piece_O:give(cmp.Grid,gd.O_matrix)
                :give(cmp.Rotations,gd.O_rotations)
                :give(cmp.Color,8)
                :give(cmp.IsPiece)
                :give(cmp.Name,"O"):give(cmp.CanGoDown)
                :give(cmp.IsActive,false)
                :give(cmp.Position,4,3)
                :give(cmp.MutablePosition,4,3)


                
return entities